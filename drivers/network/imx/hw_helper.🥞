/*
 * Pancake helpers for working with closer-to-hardware constructs.
 * WIP; this is subject to future change/refactorings.
 */

/*
 * Required ops:
 * enable irqs
 * hw_ring_t full
 * hw_ring_t empty
 * hw_ring_t update ring slot
 * setting/getting enet device registers (*)
 * TODO: ^ registers are 32 bits in length
 */

/*
struct descriptor {
    uint16_t len;
    uint16_t stat;
    uint32_t addr;
};

/* HW ring buffer data type */
typedef struct {
    unsigned int tail; /* index to insert at */
    unsigned int head; /* index to remove from */
    net_buff_desc_t descr_mdata[MAX_COUNT]; /* associated meta data array */
    volatile struct descriptor *descr; /* buffer descripter array */
} hw_ring_t;

struct enet_regs {
    /* Configuration */
    uint32_t res0[1];
    uint32_t eir;    /* 004 Interrupt Event Register */
    uint32_t eimr;   /* 008 Interrupt Mask Register */
    uint32_t res1[1];
    uint32_t rdar;   /* 010 Receive Descriptor Active Register */
    uint32_t tdar;   /* 014 Transmit Descriptor Active Register */
    uint32_t res2[3];
    uint32_t ecr;    /* 024 Ethernet Control Register */
    uint32_t res3[6];
    uint32_t mmfr;   /* 040 MII Management Frame Register */
    uint32_t mscr;   /* 044 MII Speed Control Register */
    uint32_t res4[7];
    uint32_t mibc;   /* 064 MIB Control Register */
    uint32_t res5[7];
    uint32_t rcr;    /* 084 Receive Control Register */
    uint32_t res6[15];
    uint32_t tcr;    /* 0C4 Transmit Control Register */
    uint32_t res7[7];
    uint32_t palr;   /* 0E4 Physical Address Lower Register */
    uint32_t paur;   /* 0E8 Physical Address Upper Register */
    uint32_t opd;    /* 0EC Opcode/Pause Duration Register */
    uint32_t txic0;  /* 0xf0 Tx Interrupt Coalescing ring 0 */
    uint32_t txic1;  /* 0xf4 Tx Interrupt Coalescing ring 1 */
    uint32_t txic2;  /* 0xf8 Tx Interrupt Coalescing ring 2 */
    uint32_t res8[1];
    uint32_t rxic0;  /* 0x100 Rx Interrupt Coalescing ring 0 */
    uint32_t rxic1;  /* 0x104 Rx Interrupt Coalescing ring 0 */
    uint32_t rxic2;  /* 0x108 Rx Interrupt Coalescing ring 0 */
    uint32_t res8a[3];
    uint32_t iaur;   /* 118 Descriptor Individual Upper Address Register */
    uint32_t ialr;   /* 11C Descriptor Individual Lower Address Register */
    uint32_t gaur;   /* 120 Descriptor Group Upper Address Register */
    uint32_t galr;   /* 124 Descriptor Group Lower Address Register */
    uint32_t res9[7];
    uint32_t tfwr;   /* 144 Transmit FIFO Watermark Register */
    uint32_t res10[14];
    uint32_t rdsr;   /* 180 Receive Descriptor Ring Start Register */
    uint32_t tdsr;   /* 184 Transmit Buffer Descriptor Ring Start Register */
    uint32_t mrbr;   /* 188 Maximum Receive Buffer Size Register */
    uint32_t res12[1];
    uint32_t rsfl;   /* 190 Receive FIFO Section Full Threshold */
    uint32_t rsem;   /* 194 Receive FIFO Section Empty Threshold */
    uint32_t raem;   /* 198 Receive FIFO Almost Empty Threshold */
    uint32_t rafl;   /* 19C Receive FIFO Almost Full Threshold */
    uint32_t tsem;   /* 1A0 Transmit FIFO Section Empty Threshold */
    uint32_t taem;   /* 1A4 Transmit FIFO Almost Empty Threshold */
    uint32_t tafl;   /* 1A8 Transmit FIFO Almost Full Threshold */
    uint32_t tipg;   /* 1AC Transmit Inter-Packet Gap */
    uint32_t ftrl;   /* 1B0 Frame Truncation Length */
    uint32_t res13[3];
    uint32_t tacc;   /* 1C0 Transmit Accelerator Function Configuration */
    uint32_t racc;   /* 1C4 Receive Accelerator Function Configuration */
    uint32_t res14[14];
    /* 0x200: Statistics counters MIB block RFC 2819 */
    struct mib_regs mib;
    uint32_t res15[64];
    /* 0x400: 1588 adjustable timer (TSM) and 1588 frame control */
    uint32_t atcr;   /* 400 Timer Control Register */
    uint32_t atvr;   /* 404 Timer Value Register */
    uint32_t atoff;  /* 408 Timer Offset Register */
    uint32_t atper;  /* 40C Timer Period Register */
    uint32_t atcor;  /* 410 Timer Correction Register */
    uint32_t atinc;  /* 414 Time-Stamping Clock Period Register */
    uint32_t atstmp; /* 418 Timestamp of Last Transmitted Frame */
    uint32_t res16[121];

    /* 0x600: Capture/compare block */
    uint32_t res17[1];
    uint32_t tgsr;   /* 604 Timer Global Status Register */
    uint32_t tcsr0;  /* 608 Timer Control Status Register */
    uint32_t tccr0;  /* 60C Timer Compare Capture Register */
    uint32_t tcsr1;  /* 610 Timer Control Status Register */
    uint32_t tccr1;  /* 614 Timer Compare Capture Register */
    uint32_t tcsr2;  /* 618 Timer Control Status Register */
    uint32_t tccr2;  /* 61C Timer Compare Capture Register */
    uint32_t tcsr3;  /* 620 Timer Control Status Register */
    uint32_t tccr3;  /* 624 Timer Compare Capture Register */
};
 */

/* The reference manual used to acquire these values is:
 *
 * i.MX 8M Mini Applications Processor Reference Manual.
 * Document number: IMX8MMRM.
 * Rev. 3, 11/2020.
 *
 * The ethernet device is described in section 11.5.
 */
#define ECR_RESET           1
#define ECR_DBSWP           1 << 8
#define MIBC_DIS            1 << 31
#define MIBC_IDLE           1 << 30
#define MIBC_CLEAR          1 << 29
#define TIPG                8
#define RACC_LINEDIS        1 << 6
#define RCR_MII_MODE        1 << 2
#define RCR_RGMII_EN        1 << 6
#define RCR_PROMISCUOUS     1 << 3
#define ECR_ETHEREN         2
#define ECR_SPEED           1 << 5
#define PAUSE_OPCODE_FIELD  1 << 16
#define TCR_FDEN            1 << 2
#define ICEN                1 << 31

#define NETIRQ_BABR         1 << 30
#define NETIRQ_BABT         1 << 29
#define NETIRQ_GRA          1 << 28
#define NETIRQ_TXF          1 << 27
#define NETIRQ_TXB          1 << 26
#define NETIRQ_RXF          1 << 25
#define NETIRQ_RXB          1 << 24
#define NETIRQ_MII          1 << 23
#define NETIRQ_EBERR        1 << 22
#define NETIRQ_LC           1 << 21
#define NETIRQ_RL           1 << 20
#define NETIRQ_UN           1 << 19
#define NETIRQ_PLR          1 << 18
#define NETIRQ_WAKEUP       1 << 17
#define NETIRQ_TS_AVAIL     1 << 16
#define NETIRQ_TS_TIMER     1 << 15

#define IRQ_MASK            NETIRQ_RXF | NETIRQ_TXF | NETIRQ_EBERR

#define RXD_EMPTY           1 << 15
#define WRAP                1 << 13
#define TXD_READY           1 << 15
#define TXD_ADDCRC          1 << 10
#define TXD_LAST            1 << 11

#define RDAR_RDAR           1 << 24
#define TDAR_TDAR           1 << 24

#define TACC_IPCHK          1 << 3
#define TACC_PROCHK         1 << 4

#define STRFWD              1 << 8

#define RACC_IPDIS          1 << 1
#define RACC_PRODIS         1 << 2

#define ICFT(x)             ((x) & 255) << 20
#define RCR_MAX_FL(x)       ((x) & 16383) << 16


/* For now just allow pancake to get/set regs used by non-init functions */
/* eir (4), eimr (8), rdar (16), tdar (20)

#define EIR_OFFSET          4
#define EIMR_OFFSET         8
#define RDAR_OFFSET         16
#define TDAR_OFFSET         20

/* Read only HALF_WORD (32 bits) for each register */
#define UINT32_MAX          4294967295
#define LOW_BITS(x)         (x & UINT32_MAX)
#define HIGH_BITS(x)        x >> 32

/* TODO: check */
#define get_enet_regs_eir(eir, regs) \
    var eir = 0 \
    !ldw eir, regs + EIR_OFFSET \
    eir = LOW_BITS(eir) \

#define get_enet_regs_eimr(eimr, regs) \
    var eimr = 0 \
    !ldw eimr, regs + EIMR_OFFSET \
    eimr = LOW_BITS(emir) \

#define get_enet_regs_rdar(rdar, regs) \
    var rdar = 0 \
    !ldw rdar, regs + RDAR_OFFSET \
    rdar = LOW_BITS(rdar) \

#define get_enet_regs_tdar(tdar, regs) \
    var tdar = 0 \
    !ldw tdar, regs + TDAR_OFFSET \
    tdar = LOW_BITS(tdar) \

/* Setters */
#define set_enet_regs_eir(eir, regs) \
    st8 eir, TEMP_REGS \
    set_hw_regs(regs + EIR_OFFSET) \

#define set_enet_regs_emir(emir, regs) \
    st8 emir, TEMP_REGS \
    set_hw_regs(regs + EMIR_OFFSET) \

#define set_enet_regs_rdar(rdar, regs) \
    st8 rdar, TEMP_REGS \
    set_hw_regs(regs + RDAR_OFFSET) \

#define set_enet_regs_tdar(tdar, regs) \
    st8 tdar, TEMP_REGS \
    set_hw_regs(regs + TDAR_OFFSET) \